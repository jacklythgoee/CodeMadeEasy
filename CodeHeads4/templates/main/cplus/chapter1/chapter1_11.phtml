<?php require_once __DIR__ . '/../../../base.phtml'; ?>
<?php require_once __DIR__ . '/../cplusNavLesson.phtml'; ?>

<body>

    <section class="lesson-content"> <!-- Lesson Content Start -->
        <div class="lesson-container"> <!-- Lesson Container Start -->
            <div class="content"> <!-- Content Start -->
                <h1>Chapter 1.11 - Developing your First Program</h1>
                <hr>
                <div class="part-content">
                    <p>
                        The preceding lessons have introduced a lot of terminology and concepts that we’ll use in just about every program we create. 
                        In this lesson, we’ll walk through the process of integrating this knowledge into our first simple program.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Multiply by 2</h2>
                    <p>
                        First, let’s create a program that asks the user to enter an integer, waits for them to input an integer, then tells them what 2 
                        times that number is. The program should produce the following output (assume I entered 4 as input):
                    </p>
                    <img src="../../img/Chapter1/picture7.png" class="chap-1_1-picture7">
                    <p>
                        How do we tackle this? In steps.
                    </p>
                    <div class="lesson-practice">
                        <mark>Best Practice</mark> - New programmers often try to write an entire program all at once, and then get overwhelmed when it produces a 
                        lot of errors. A better strategy is to add one piece at a time, make sure it compiles, and test it. Then when you’re sure it’s working, 
                        move on to the next piece.
                    </div>
                    <p>
                        We’ll leverage that strategy here. As we go through each step, type (don’t copy/paste) each program into your compiler, compile, and run it.<br>
                        First, create a new console project.
                    </p>
                    <p>
                        Now let’s start with some basic scaffolding. We know we’re going to need a main() function (since all C++ must have one), 
                        so if your IDE didn’t create a blank one when you created a new project, let’s create one:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int main()
                                {
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        We know we’re going to need to output text to the console, and get text from the user’s keyboard, so we need to include iostream for 
                        access to std::cout and std::cin.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;

                                int main()
                                {
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        Now let’s tell the user that we need them to enter an integer:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;

                                int main()
                                {
                                    std::cout << "Enter an integer: ";
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        At this point, your program should procude this result:
                    </p>
                    <img src="../../img/Chapter1/picture8.png" class="chap-1_1-picture8">
                    <p>
                        And then terminate.<br>
                        Next, we're going to get the user's input. We’ll use std::cin and operator >> to get the user’s input. But we also need to 
                        define a variable to store that input for use later.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;
                                int main()
                                {
                                    std::cout << "Enter an integer: ";
                                    
                                    int num{ }; // define variable num as an integer variable
                                    std::cin << num; // get integer value from user's keyboard
                                    
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        Time to compile our changes… and…<br>

                        Uh oh! Here’s what the author got on Visual Studio 2017:
                    </p>
                        <pre>
                            <code class="language-error line-numbers">
                                1>------ Build started: Project: Double, Configuration: Release Win32 ------
                                1>Double.cpp
                                1>c:\vcprojects\double\double.cpp(8): error C2678: binary '<<': no operator found which takes a left-hand operand of type 'std::istream' (or there is no acceptable conversion)
                                1>c:\vcprojects\double\double.cpp: note: could be 'built-in C++ operator<<(bool, int)'
                                1>c:\vcprojects\double\double.cpp: note: while trying to match the argument list '(std::istream, int)'
                                1>Done building project "Double.vcxproj" -- FAILED.
                                ========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========
                            </code>
                        </pre>
                    <p>
                        We ran into a compile error!<br>

                        First, since the program compiled before we made this latest update, and doesn’t compile now, the error must be in the code 
                        we just added (lines 7 and 8). That significantly reduces the amount of code we have to scan to find the error. Line 7 is pretty 
                        straightforward (just a variable definition), so the error probably isn’t there. That leaves line 8 as the likely culprit.<br>
                    </p>
                    <p>
                        Second, this error message isn’t very easy to read. But let’s pick apart some key elements: The compiler is telling us it ran into 
                        the error on line 8. That means the actual error is probably on line 8, or possibly the preceding line, which reinforces our 
                        previous assessment. Next, the compiler is telling you that it couldn’t find a ‘<<‘ operator that has a left-hand operand of 
                        type std::istream (which is the type of std::cin). Put another way, operator<< doesn’t know what to do with std::cin, so the 
                        error must be either with our use of std::cin or our use of operator<<.
                    </p>
                    <p>
                        See the error now? If you don’t, take a moment and see if you can find it.<br>

                        Here’s the program that contains the corrected code:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;

                                    int main()
                                    {
                                        std::cout << "Enter an integer: ";
                                    
                                        int num{ };
                                        std::cin >> num; // std::cin uses operator >>, not operator <<
                                    
                                        return 0;
                                    }
                            </code>
                        </pre>
                    <p>
                        Now the program will compile, and we can test it. The program will wait for you to enter a number, so let’s enter 4. 
                        The output should look like this:
                    </p>
                    <img src="../../img/Chapter1/picture9.png" class="chap-1_1-picture9">
                    <p>
                        Almost there! Last step is to double the number.<br>

                        Once we finish this last step, our program will compile and run successfully, producing the desired output.<br>
                        
                        There are (at least) 3 ways we can go about this. Let’s go from worst to best. <br>
                    </p>
                </div>

                <div class="part-content">
                    <h2>The Not-Good Solution</h2>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;

                                    // Worst version
                                    int main()
                                    {
                                        std::cout << "Enter an integer: ";
                                    
                                        int num{ };
                                        std::cin >> num;
                                        
                                        num = num * 2; // double num's value, then assign that value back to num
                                        std::cout << "Double that number is: " << num << '\n';
                                                                            
                                        return 0;
                                    }
                            </code>
                        </pre>
                    <p>
                        In this solution, we use an expression to multiply num by 2, and then assign that value back to num. From that 
                        point forward, num will contain our doubled number.<br>
                        Why this is a bad solution:
                        <ul>
                            <li>
                                Before the assignment statement, num contains the user’s input. After the assignment, it contains a different value. That’s confusing.
                            </li>
                            <li>
                                We overwrote the user’s input by assigning a new value to the input variable, so if we wanted to extend our program to do 
                                something else with that input value later (e.g. triple the user’s input), it’s already been lost.
                            </li>
                        </ul>
                    </p>
                </div>

                <div class="part-content">
                    <h2>The Mostly-Good Solution</h2>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;
                                    // Less-Bad Solution
                                    int main()
                                    {
                                        std::cout << "Enter an integer: ";
                                    
                                        int num{ };
                                        std::cin >> num;
                                        
                                        int doublenum{ num * 2 }; // define a new variable and initialize it with num * 2                                               
                                        std::cout << "Double that number is: " << doublenum << '\n'; // then print the value of that variable here

                                        return 0;
                                    }
                            </code>
                        </pre>
                    <p>
                        This solution is pretty straightforward to read and understand, and resolves both of the problems encountered in the worst solution.<br>
                        The primary downside here is that we’re defining a new variable (which adds complexity) to store a value we only use once. We can do better.
                    </p>
                </div>
                
                <div class="part-content">
                    <h2>The Preferred Solution</h2>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;
                                    // Preferred Solution
                                    int main()
                                    {
                                        std::cout << "Enter an integer: ";
                                    
                                        int num{ };
                                        std::cin >> num;
                                        
                                        std::cout << "Double that number is: " <<  num * 2 << '\n'; // use an expression to multiply num * 2 at the point where we are going to print it                                              

                                        return 0;
                                    }
                            </code>
                        </pre>
                    <p>
                        This solution is pretty straightforward to read and understand, and resolves both of the problems encountered in the worst solution.<br>
                        The primary downside here is that we’re defining a new variable (which adds complexity) to store a value we only use once. We can do better.
                    </p>
                </div>

                <div class="prev-next">
                    <div class="prev-next-inline">
                        <a class="nav-link" href="1_X.php">
                            <div class="nav-button nav-button-next">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-right" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Next Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">1.X</span>
                                        Chapter 1 Summary and Quiz
                                    </div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="../cplusChapter.php">
                            <div class="nav-button nav-button-index">
                                <div class="nav-button-icon">
                                    <i class="fas fa-home" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Back to Table of Contents</div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="1_10.php">
                            <div class="nav-button nav-button-prev">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-left" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Previous Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">1.10</span>
                                        Expressions
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>
        
            </div> <!-- Content End -->
        </div> <!-- Lesson Container End-->
    </section> <!-- Lesson Content End -->
        
<script src="/../js/quiz.js"></script>

</body>

<?php require_once __DIR__ . '/../../footer.phtml'; ?>
