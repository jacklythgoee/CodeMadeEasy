<?php require_once __DIR__ . '/../../../base.phtml'; ?>
<?php require_once __DIR__ . '/../cplusNavLesson.phtml'; ?>

<body>

    <section class="lesson-content"> <!-- Lesson Content Start -->
        <div class="lesson-container"> <!-- Lesson Container Start -->
            <div class="content"> <!-- Content Start -->
                <h1>Chapter 1.4 - Variable Assignment and Initialization</h1>
                <hr>
                <p>
                    In this lesson we will explore how to put values into variables and use those values.
                </p>
                <div class="part-content">
                    <h2>Variable Assignment</h2>
                    <p>
                        After a variable has been defined, you can give it a value using the = operator. 
                        This process is called <b>copy assignment</b>.
                    </p>
                    <p>
                        It is named this because it copies the value on the right-hand side of the = 
                        operator to the variable on the left-hand side of the operator. The = operator is called the <b>assignment operator</b>.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int main()
                                {
                                    int width;
                                    width = 5;      // Copy assignment of value 5 into variable width

                                    // Variable width has a value of 5
                                    width = 7;      //Change value stored in variable width to 7

                                    //Variable width now has a value of 7
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        When we assign 7 to a variable width, the value 5 that was previously there is over written.
                        Normal variables can only hold one value at a time 
                    </p>
                    <div class="lesson-warning">
                        <mark>Warning</mark> - one of the most common mistakes that new programmers make is to confuse the assignment operator (=) 
                        with the equality operator (==). Assignment (=) is used to assign a value to a variable. Equality (==) is used to test 
                        whether two operands are equal value.
                    </div>
                </div>

                <div class="part-content">
                    <h2>Initialization</h2>
                    <p>
                        One downside of assignment is that it requires at least two statements: one to define the variable, and one to assign the value.
                    </p>
                    <p>
                        These two steps can be combined. When a variable is defined, you can also provide an initial value for the variable at the same time. 
                        This is called <b>initialization</b> . the value used to initialize a variable is called an <b>initializer</b>.
                    </p>
                    <p>
                        There are 4 basic ways to initialize variables in C++:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int a;      // No initializer
                                int b = 5;  // Initializer after equals sign
                                int c(6);   // Initializer in parenthesis
                                int d{ 7 }  // Initializer in braces
                            </code>
                        </pre>
                </div>

                <div class="part-content">
                    <h2>Copy Initialization</h2>
                    <p>
                        When an initializer is provided after an equal’s sign, this is called <b>copy initialization</b>. 
                        Copy initialization was inherited from the C language.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int b = 5;  // Initializer after equals sign
                            </code>
                        </pre>
                    <p>
                        Much like copy assignment, this copies the value on the right-hand side of the equals to the variable
                            being created on the left-hand side.
                    
                        For simple types like int, copy initialization is efficient. However, when types get more complex, 
                        copy initialization can be inefficient.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Direct Initialization</h2>
                    <p>
                        When an initializer is provided inside parenthesis, this is called <b>direct initialization</b>.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int c(6);   // Initializer in parenthesis
                            </code>
                        </pre>
                    <p>
                        For simple data types (like int), copy and direct initialization are essentially the same.
                            For more complicated types, direct initialization tends to be more efficient than copy initialization.
                    </p>
                </div>

                <div class="part-content">
                    <h2>List Initialization</h2>
                    <p>
                        Unfortunately, direct initialization cannot be used for all types of initializations 
                        (such as initializing an object with a list of data). To provide a more consistent initialization mechanism, 
                        there is a list initialization that uses curly braces. This can come in three forms.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int width{ 5 };            // Direct List Initialization of value 5 into variable width (preferred way)
                                int height = { 6 };     // Copy List Initialization of value 6 into variable height
                                int depth{};               // Value Initialization
                            </code>
                        </pre>
                    <p>
                        Direct and copy list initialization function almost identically, but the direct dorm is generally preferred

                        List initialization has the added benefit of disallowing “narrowing” conversions. This means that if you try to use 
                        list initialization to initialize a variable with a value it cannot safely hold, the compiler will throw a warning or an error. For example:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int width{ 4.5 };            // Error: not all double values fit into an int
                            </code>
                        </pre>
                    <p>
                        In the line of code above, we are trying to assign (4.5) that has a factional part to an integer variable. 
                        Int variables can only hold numbers without a fractional part. Copy and direct initialization would drop the fractional part, 
                        resulting in (4). However, with list initialization, this will cause the compiler to issue an error. Conversions that can be 
                        done without potential data loss are allowed.
                    </p>
                    <div class="lesson-practice">
                        <mark>Best Practice</mark> - Favor Initialization using curly braces whenever possible.
                    </div>
                </div>

                <div class="part-content">
                    <h2>Initialize your Variables</h2>
                    <p>
                        Initialize your variables upon creation. You may eventually find cases where you want to ignore this advice for a specific reason
                        ( e.g., a performance critical section of code that uses a lot of variables ), and okay, if the choice is made deliberately.
                    </p>
                    <div class="lesson-practice">
                        <mark>Best Practice</mark> - Initialize your variables upon creation.
                    </div>
                </div>

                <div class="part-content quiz">
                    <h2>Chapter 1.4 End of Topic Quiz</h2>
                    <p>
                        The following quiz is meant to reinforce your understanding of the material presented above.
                    </p>
<!-- --------------------------------------------------Question 1 Start --------------------------------------------------------------------------------- -->
                    <h4 class="quiz-question">1. What is the difference between initialization and assignment?</h4>
                    <button onclick="show_hide(this)" class="quiz-button">Show Solution</button>
                    <p id="answer">
                        <b>Initialization</b> gives a variable an initial value at the point when it is created. 
                        <b>Assignment</b> gives a variable a value some point after it is created.
                    </p>
                    <br><br><hr>

<!-- ------------------------------------------------Question 2 Start --------------------------------------------------------------------------------- -->
                    <h4 class="quiz-question">2. What form of initialization should you be using? </h4>
                    <button onclick="show_hide(this)" class="quiz-button">Show Solution</button>
                    <p id="answer">
                        <b>Direct</b> list initialization 
                    </p>
                    <br><br><hr>
                </div>

                <div class="prev-next">
                    <div class="prev-next-inline">
                        <a class="nav-link" href="1_5.php">
                            <div class="nav-button nav-button-next">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-right" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Next Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">1.5</span>
                                        Introduction to IOSTREAM: COUT, CIN, and ENDL
                                    </div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="../cplusChapter.php">
                            <div class="nav-button nav-button-index">
                                <div class="nav-button-icon">
                                    <i class="fas fa-home" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Back to Table of Contents</div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="1_3.php">
                            <div class="nav-button nav-button-prev">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-left" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Previous Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">1.3</span>
                                        Introuduction to Objects and Variables
                                    </div>
                                </div>
                            </div>
                        </a>

                    </div>
                </div>

            </div> <!-- Content Start -->
        </div> <!-- Lesson Container End -->
    </section> <!-- Lesson Content End -->
    
<script src="/../js/quiz.js"></script>

</body>

<?php require_once __DIR__ . '/../../footer.phtml'; ?>
