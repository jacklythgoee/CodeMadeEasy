<?php require_once __DIR__ . '/../../../base.phtml'; ?>
<?php require_once __DIR__ . '/../cplusNavLesson.phtml'; ?>

<body>

    <section class="lesson-content"> <!-- Lesson Content Start -->
        <div class="lesson-container"> <!-- Lesson Container Start -->
            <div class="content"> <!-- Content Start -->
                <h1>Chapter 2.11 - Header Guards</h1>
                <hr>

                <div class="part-content">

                    <p>
                        In lesson <a href="chapter2_6.html">2.6 - Forward Declaration and Definitions</a>, we noted that a variable
                        or function identifier can only have one definition (the one definition rule). Thus, a program that defines a variable
                        identifier more than once will cause a compile error:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int main()
                                {
                                    int x;  //This is a definition of a variable X
                                    int x   //Compile error: duplicate definition 

                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        Similarly, programs that define a function more than once will also cause a compile error
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                &#x3C;iostream&#x3E;
                                int foo()    //This is a definition for variable X
                                {
                                    return 5;
                                }
                                int foo()   //Compile Error: duplicate definition
                                {
                                    return 5;
                                }
                                int main()
                                {
                                    std::cout << foo();
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>                                
                        While these programs are easy to fix, with header files, it’s quite easy to end up in a situation 
                        where a definition in a header file gets included more than once. This can happen when a header file #includes another header file.
                    </p>

                </div>
                <div class="part-content">
                    <h3>square.h</h3>
                        <pre>
                            <code class="language-cpp line-numbers">
                                // We shouldn't be including function definitions in header files
                                // But for the sake of this example, we will
                                int getSquareSides()
                                {
                                    return 4;
                                }
                            </code>
                        </pre>
                    <h3>goemetry.h</h3>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include "square.h"
                            </code>
                        </pre>
                    <h3>main.cpp</h3>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include "square.h"
                                #include "geometry.h"

                                int main()
                                {
                                    return 0;
                                }
                            </code>
                        </pre>
                    <div class="lesson-warning">
                        This seemingly innocent looking program won't compile!<br>
                        Here is whats happening.<br>
                        First, main.cpp #includes square.h, which copies the definition for function getSquareSides into main.cpp,
                        then main.cpp #includes geometry.h, which #includes square.h itself. This copies contents of square.h 
                        (including the definition for function getSquareSides) into geometry.h, which then gets copied into main.cpp
                    </div>
                    <p>
                        Thus, after resolving all of the #includes, main.cpp ends up looking like this:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int getSquareSides()    //From square.h
                                {
                                    returm 4;
                                }
                                int getSquareSides()    //From geometry.h (via square.h)
                                {
                                    return 4;
                                }
                                int main()
                                {
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        Duplicate definitions and a compile error. Each file, individually, is fine. However, because
                        main.cpp ends up #including the content of square.h twice, we have run into problems. If geometry.h 
                        needs getSquareSides(), and main.cpp needs both geometry.h and square.h.
                    </p>

                </div>
                <div class="part-content">

                    <h2>Header Guards</h2>
                    <p>
                        The good news is that we can avoid the above problem via a mechanism called a <b>header guard</b>
                        (also called an <b>include guard</b> ). Header guards are conditional compilation directives 
                        that take the following form:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #ifndef SOME_UNIQUE_NAME_HERE
                                #define SOME_UNIQUE_NAME_HERE

                                // Your declaration (and certain types of definitions) here
                                #endif
                            </code>
                        </pre>
                    <p>
                        When this header is #included. The preprocessor checks whether SOME_UNIQUE_NAME_HERE has been previously defined. 
                        If this is the first time we are including the header, SOME_UNIQUE_NAME_HERE will not have been defined. 
                        Consequently, it #defines SOME_UNIQUE_NAME_HERE and includes the contents of the file. If the header is 
                        included again into the same file, SOME_UNIQUE_NAME_HERE will already have been defined from the first 
                        time the contents of the header were included, and the contents of the header will be ignored.
                    </p>
                    <p>
                        All of your header files should have header guard on them. SOME_UNIQUE_NAME_HERE can be any name you 
                        want, but by convention is set to the full filename of the header file, typed in all caps, using 
                        underscores for spaces or punctuation. For example, square.h would have the header guard:
                    </p>

                </div>
                <div class="part-content">

                    <h2>Can we just avoid definitions in header files</h2>
                    <p>
                        We have generally told you not to include function definitions in your headers. So, you may 
                        be wondering why you should include header guards if they protect you from something you should not do.
                    </p>
                    <p>
                        There are quite a few cases we will show you in the future where it’s necessary to put non-function definitions 
                        in a header file. For example, C++ will let you create your own types. These use-defined types are 
                        typically defined in header files, so the definition can be propagated out to the code files that 
                        need to use them. Without a header guard, your code files can end up with multiple identical copies 
                        of these definitions, which will cause a duplicate definition compilation error.
                    </p>
                    <p>
                        So even though it is not strictly necessary to have guards at this point in the tutorial series, we are 
                        establishing good habits now, so you do not have to unlearn bad habits later.
                    </p>

                </div>
                <div class="part-content">
                    <h2>#pragma_once</h2>
                    <p>
                        Many compilers support a simpler, alternate form of header guards using the #pragma directive:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #pragma_once
                                //Your code here
                            </code>
                        </pre>
                    <p>
                        #pragma once serves the same purpose as header guards and has the added benefit of being 
                        shorter and less error-pane. However, #pragma once is not an official part of the C++ 
                        Language, and not all compilers support it although most do. For compatibility purposes, 
                        we recommend sticking to traditional header guards. They are not much more work, and they 
                        are guaranteed to be supported on all compliant compilers.
                    </p>

                </div>
                <div class="part-content">
                    <h2>Summary</h2>
                    <p>
                        Header guards are designed to ensure that the contents of a given header file are not 
                        copied more than once into any single file, in order to prevent duplicate definitions. 
                        Not that duplicate declarations are fine, since a declaration can be declared multiple 
                        times without incident. But even if your header file is composed of all declarations it’s 
                        still a best practice to include header guards. Note that header guards do not prevent the 
                        contents of a header file being copied into separate project files. This is a good thing, 
                        because we often need to reference the contents of a given header from different project files.
                    </p>
                </div>



                    
                
                <div class="prev-next">
                    <div class="prev-next-inline">
                        <a class="nav-link" href="2_12.php">
                            <div class="nav-button nav-button-next">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-right" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Next Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">2.12</span>
                                        How to design your first program
                                        
                                    </div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="../cplusChapter.php">
                            <div class="nav-button nav-button-index">
                                <div class="nav-button-icon">
                                    <i class="fas fa-home" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Back to Table of Contents</div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="2_10.php">
                            <div class="nav-button nav-button-prev">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-left" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Previous Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">2.10</span>
                                        Header files
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>

            </div> <!-- Content End -->
        </div> <!-- Lesson Container End -->
    </section> <!-- Lesson Content End -->
 
<script src="/../js/quiz.js"></script>

</body>

<?php require_once __DIR__ . '/../../footer.phtml'; ?>
