<?php require_once __DIR__ . '/../../../base.phtml'; ?>
<?php require_once __DIR__ . '/../cplusNavLesson.phtml'; ?>

<body>

    <section class="lesson-content"> <!-- Lesson Content Start -->
        <div class="lesson-container"> <!-- Lesson Container Start -->
            <div class="content"> <!-- Content Start -->
                <h1>Chapter 2.12 - How to Design your First Program</h1>
                <hr>
                <div class="part-content">
                    <p>
                        Now that we have learnt basics about programming, let’s look more closely on how to design a program.
                    </p>
                    <p>
                        When you sit down to write a program, generally you have some kind of idea, which you would like 
                        to write a program for. New programmers often have trouble figuring out how to convert that idea 
                        into actual code. But it turns out, you have many of the problem-solving skills you need already, 
                        acquired from everyday life.
                    </p>
                    <p>
                        The most important thing to remember is to design your program <b>before</b> you start coding. 
                        In many regards, programming is like architecture. What would happen if you tried to build 
                        a house without following an architectural plan? Odds are, unless you are very talented, 
                        you would end up with a house that had a lot of problems, and you will have to spend a lot 
                        of time fixing problems that could have been avoided all together with a little thinking ahead.  
                    </p>
                    <p>
                        A little up-front planning will save you both time and frustration in the long run. Now, we will lay 
                        out a generalized approach for converting ideas into a simple functional program.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Design Step 1: Define your goal</h2>
                    <p>
                        In order to write a successful program, you first need to define what your goal is. Ideally, you 
                        should be able to state this in a sentence or two. It is often useful to express this as a user-facing outcome. For example: 
                    </p>
                    <ul>
                        <li>
                            Allow the user to organize a list of names and associated phone numbers
                        </li>
                        <li>
                            Generate randomized dungeons that will produce interesting looking caverns
                        </li>
                        <li>
                            Generate a list of stock recommendations for stocks that have high dividends
                        </li>
                        <li>
                            Model how long it takes for a ball dropped of a tower to hit the ground
                        </li>
                    </ul>
                    <p>
                        Although this step seems obvious, it’s also very important. The worst thing you can do is write a 
                        program that does not actually do what you or your employer wanted.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Design Step 2: Define Requirements</h2>
                    <p>
                        While defining your problems helps you determine what outcome you want, 
                        it’s still vague. The next step is to think about requirements
                    </p>
                    <p>
                        Requirements is a fancy word for both constraints that your solution needs to abide by 
                        (budget, timeline, space, memory etc.), as well as the capabilities that your program 
                        must exhibit in order to meet the user’s needs. Note that your requirements should 
                        similarly be focused on the “what”, not the “how”.<br>
                        For example:
                    </p>
                    <ul>
                        <li>
                            Defining what target architecture and/or OS your program will run on.
                        </li>
                        <li>
                            Determining what set of tools you will be using.
                        </li>
                        <li>
                            Determining whether you will write your program alone or as part of a team
                        </li>
                        <li>
                            Determining how you will back up your code.
                        </li>
                    </ul>
                    <p>
                        However, as a new programmer, the answers to these questions are typically simple: You are writing a 
                        program for your own use, alone, on your system, using an IDE you purchased or downloaded, 
                        and your code is probably not used by anybody but you. This makes things easy.
                    </p>
                    <p>
                        With that said, if you are going to work on anything of non-trivial complexity, you should have 
                        a plan to back up your code. It is not enough to just zip of copy the directory to another location 
                        on your machine. If your system crashes, you will lose everything. A good backup strategy involves 
                        getting a copy of the code off your system altogether. There are lots of easy ways to do this: Zip 
                        it up and email it to yourself, copy it to Dropbox or another cloud service, FTP it to another 
                        machine, copy it to another machine on your local network, or use a version control system residing 
                        on another machine or in the cloud. Version control systems have the added advantage of not only 
                        being able to restore your files, but also to toll them back to a previous version.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Design Step 4: Break hard problems down into easy problems</h2>
                    <p>
                        In real life, we often need to perform tasks that are very complex. Trying to figure 
                        out how to do these tasks can be very challenging. In such cases, we often make 
                        use of the top-down method of problem solving. That is, instead of solving a 
                        single complex task, we break that task into multiple subtasks, each of which 
                        is individually easier to solve. If those subtasks are still too difficult to 
                        solve, they can be broken down further. By continuously splitting complex tasks 
                        into simpler ones, you can eventually get to a point where each individual task 
                        is manageable, if not trivial.
                    </p>
                    <p>
                        Let us take a look at an example of this. Let us say we want to clean our house. Our task hierarchy currently looks like this:
                    </p>
                    <ul>
                        <li>
                            Clean the house
                        </li>
                    </ul>
                    <p>
                        Cleaning the entire house is a pretty big task to do in one sitting, so let us break it into subtasks:
                        
                    </p>

                    <ul>
                        <li>
                            Clean the house
                        </li>
                        <ul>
                            <li>
                                Vacuum the Carpets
                            </li>
                            <li>
                                Clean the bedrooms
                            </li>
                            <li>
                                Clean the kitchen
                            </li>
                        </ul>
                    </ul>

                    <p>
                        That is more manageable, as we now have subtasks that we can focus on individually. 
                        However, we can break some of these down further:
                    </p>
                    <ul>
                        <li>
                            Clean the house
                        </li>
                        <ul>
                            <li>
                                Vacuum the Carpets
                            </li>
                            <li>
                                Clean the Bedrooms
                            </li>
                            <ul>
                                <li>
                                    Scrub the Toilet
                                </li>
                                <li>
                                    Wash the Sink
                                </li>
                            </ul>
                            <li>
                                Clean the Kitchen
                            </li>
                            <ul>
                                <li>
                                    Clear the Countertops
                                </li>
                                <li>
                                    Clean the Countertops
                                </li>
                                <li>
                                    Scrub the sink
                                </li>
                                <li>
                                    Take out the trash
                                </li>
                            </ul>

                        </ul>
                    </ul>
                    <p>
                        Now we have a hierarchy of tasks, none of them particularly hard. By completing each of these 
                        relatively manageable sub-items, we can complete the more difficult overall task of cleaning the 
                        house. The other way to create a hierarchy of tasks is to do so from the <b>bottom up</b>. In this 
                        method, we will start from a list of easy tasks, and construct the hierarchy by grouping them.
                    </p>
                    <p>
                        As an example, many people have to go to work or school on weekdays, so let us say 
                        we want to solve the problem of “go to work”. If you were asked what tasks you did 
                        in the morning from bed, you might come up with the following list:
                    </p>
                    <ul>
                        <li>Pick out Clothes</li>
                        <li>Get Dressed</li>
                        <li>Eat Breakfast</li>
                        <li>Drive to Work</li>
                        <li>Brish your Teeth</li>
                        <li>Get Out of Bed</li>
                        <li>Prepare Breakfast</li>
                        <li>Get in your Car</li>
                        <li>Take a Shower</li>
                    </ul>
                    <p>
                        Using the bottom-up method, we can organize these into hierarchy of items by looking for ways to group items 
                        with similarities together:
                    </p>
                    <ul>
                        <li>Get from Bed to Work</li>
                        <ul>
                            <li>Bedroom Things</li>
                            <ul>
                                <li>Get out of Bed</li>
                                <li>Pick out Clothes</li>
                                <li>Get Dressed</li> 
                            </ul>
                            <li>Bathroom Things</li>
                            <ul>
                                <li>Take a Shower</li>
                                <li>Brush your Teeth</li>
                            </ul>
                            <li>Breakfast Things</li>
                            <ul>
                                <li>Prepare Cereal</li>
                                <li>Eat Cereal</li>                                  
                            </ul>
                            <li>Transportation Things</li>
                            <ul>
                                <li>Get in your Car</li>
                                <li>Drive to Work</li>
                            </ul>
                        </ul>
                    </ul>
                    <p>
                        As it turns out, these tasks hierarchies are extremely useful in programming, because once you have 
                        a task hierarchy, you have essentially defined the structure of your overall program. The top-level task 
                        becomes main() because it is the main problem you are trying to solve. The sub items become functions in the program
                    </p>
                    <p>
                        If it turns out that one of the functions is too difficult to implement, simply split that item into multiple subtasks. 
                        Eventually you should reach a point where each function in your program is trivial to implement.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Design step 5: Figure out the sequence of events</h2>
                    <p>
                        Now that your program has a structure, it’s time to determine how to link all the tasks together. 
                        The first step is to determine the sequence of events that will be performed. For example, 
                        when you get up in the morning, what order do you do the above tasks? It might look like this:
                    </p>
                    <ul>
                        <li>Bedroom things</li>
                        <li>Bathroom Things</li>
                        <li>Breakfast Things</li>
                        <li>Transportation Things</li>
                    </ul>
                    <p>
                        If we were writing a calculator, we might do things in this order:
                    </p>
                    <ul>
                        <li>Get First number from user</li>
                        <li>Get mathematical operation from user</li>
                        <li>Get Second number from user</li>
                        <li>Calculate the Result</li>
                        <li>Print the Result</li>
                    </ul>
                    <p>
                        At this point, we are ready for implementation
                    </p>
                </div>

                <div class="part-content">
                    <h2>Implementation step 1: Outlining your main function </h2>
                    <p>
                        Now we are ready to start implementation. The above sequences can be used to outline your main 
                        program. Do not worry about inputs or outputs for the time being.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int main()
                                {
                                    // doBedroomThings();
                                    // doBathroomThings();
                                    // doBreakfastThings();
                                    // doTransportationThings();
                                }
                            </code>
                        </pre>
                    <p>
                        Or in the case of the calculator:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int main()
                                {
                                    // Get first number from user
                                //    getUserInput();

                                    // Get mathematical operation from user
                                //    getMathematicalOperation();

                                    // Get second number from user
                                //    getUserInput();

                                    // Calculate result
                                //    calculateResult();

                                    // Print result
                                //    printResult();

                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        Note that if you are going to use this “outline” method for constructing your programs, your 
                        functions will not compile because the definitions do not exist yet. Commenting out the function 
                        calls until you are ready to implement the function definitions is one wat to address this. 
                        Alternatively, you can stub out your functions so your program will compile.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Implementation step 2: Implement each function</h2>
                    <p>
                        In this step, for each function, you will do three things:
                    </p>
                    <ul>
                        <li>Define the function prototype (inputs or outputs)</li>
                        <li>Write the function</li>
                        <li>Test the function</li>
                    </ul>
                    <p>
                        If your functions are granular enough, each function should be fairly simple straightforward. If a 
                        given function still seems overly-complex to implement, perhaps it needs to be broken down into 
                        subfunctions that can be more easily implemented 
                    </p>
                    <p>
                        Let’s do the first function from the calculator example:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;

                                // Full implementation of the getUserInput function
                                int getUserInput()
                                {
                                    std::cout << "Enter an integer ";
                                    int input{};
                                    std::cin >> input;
                                    
                                    return input;
                                }
                                    
                                int main()
                                {
                                    // Get first number from user
                                    int value{ getUserInput() }; // Note we've included code here to test the return value!
                                    std::cout << value; // debug code to ensure getUserInput() is working, we'll remove this later
                                    
                                    // Get mathematical operation from user
                                //    getMathematicalOperation();
                                    
                                    // Get second number from user
                                //    getUserInput();
                                    
                                    // Calculate result
                                //    calculateResult();
                                    
                                    // Print result
                                //    printResult();
                                    
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        First, we have determined that the getUserInput function takes no arguments and will return an 
                        int value back to the caller. That gets reflected in the function prototype having a return 
                        value of int and no parameters. Next we have written the body of the function, which is a 
                        straightforward 4 statements. Finally, we have implemented some temporary code in function 
                        main to test that function getUserInput is working correctly.  
                    </p>
                    <p>
                        We can run this program many times with different input values and make sure that the program is behaving 
                        as we expect at this point. If we find anything that does not work, we know the problem is in the code we have just written.
                    </p>
                    <p>
                        Once we are convinced the program is working as intended up to this point, we can remove the 
                        temporary testing code, and proceed to implementation of the net function. We will not finish 
                        the program in this lesson, as we need to cover some additional topics first.
                    </p>
                    <div class="lesson-rule">
                        <mark>Remember</mark> - Do not implement your entire program in one go. Work on it in steps, testing each step 
                        along the way before proceeding.
                    </div>
                </div>

                <div class="part-content">
                    <h2>Implementation step 3: Final Testing</h2>
                    <p>
                        Once your program is “finished”, the last step is to test the whole program and ensure it works 
                        as intended. If it does not work, locate the problem and fix it.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Words of advice when writing programs</h2>
                    <p>
                        <b>Keep your programs simple to start</b>. Often new programmers have a grand vision for all 
                        things they want their program to do. “ I want to write a role-playing game with 
                        graphics and sound and random monsters and dungeons, with a town you can visit to sell 
                        items that you find in the dungeon” if you try to write something too complex to start, 
                        you will become overwhelmed and discouraged at your lack of progress. Instead, make your 
                        first goal as simple as possible, something that is definitely within your reach. For example, 
                        “I want to be able to display a 2-dimensional field on the screen”.
                    </p>
                    <p>
                        <b>Add features over time</b>. Once you have your simple program working and working well then you can add 
                        features to it. For example, once you can display your field, add a character who can walk around. 
                        Once you can walk around, add walls that can impede your progress. Once you have walls, 
                        build a simple time out of them. Once you have a town, add merchants. By adding each feature 
                        incrementally your program will get progressively more complex without overwhelming you in the process.
                    </p>
                    <p>
                        <b>Focus on one area at a time</b>. Do not try to code everything at once, and do not divide your attention 
                        across multiple tasks. Focus on one task at a time. It is much better to have one working task and 
                        five that have not been started yet then six partially working tasks. If you split your attention, 
                        you are more likely to make mistakes and forget important details.  
                    </p>
                    <p>
                        <b>Test each piece of code as you go</b>. New programmers will often write the entire program in one pass. 
                        Then when they compile it for the first time, the compiler reports hundreds of errors. This can not 
                        only be intimidating, if your code does not work, it may be hard to figure out why. Instead, write 
                        a piece of code, and them compile and test it immediately. If it does not work, you will know 
                        exactly where the problem is, and it will be easy to fix. Once you are sure that the code works, 
                        move to the next piece and repeat. It may take longer to finish writing your code, but when you 
                        are done the whole thing should work, and you will not have to spend twice as long trying to figure 
                        out why it does not work.
                    </p>
                    <p>
                        <b>Do not invest in perfecting early code</b>. The first draft of a program is rarely good. Furthermore, programs 
                        tend to evolve over time, as you add capabilities and find better ways to structure things. If you invest 
                        too early in polishing your code, you risk losing all of that investment when a code change 
                        is necessary. Instead, get your features minimally working and then move on. As you gain confidence 
                        in your solutions, apply successive layers of polish. Do not aim for perfect – non-trivial programs 
                        are never perfect, and there is always something more that could be done to improve them. Get too 
                        good and move on.
                    </p>
                    <p>
                        Most new programmers will shortcut many of these steps and suggestions because it seems like a lot of effort, and they
                        do not see it as being fun as writing code is. However, for any non-trivial project, following these steps will 
                        definitely save you a lot of time in the long run. A little planning upfront saves a lot of debugging at the end. 
                    </p>
                    <p>
                        The good news is that once you become comfortable with all these concepts, they will start coming more naturally to you. 
                        Eventually you will get to the point where you can write entire functions without and pre-planning at all.
                    </p>
                </div>

                <div class="prev-next">
                    <div class="prev-next-inline">
                        <a class="nav-link" href="2_X.php">
                            <div class="nav-button nav-button-next">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-right" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Next Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">2.X</span>
                                        End of Chapter Summary and Quiz
                                        
                                    </div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="../cplusChapter.php">
                            <div class="nav-button nav-button-index">
                                <div class="nav-button-icon">
                                    <i class="fas fa-home" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Back to Table of Contents</div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="2_11.php">
                            <div class="nav-button nav-button-prev">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-left" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Previous Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">2.11</span>
                                        Header Gurads
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>

            </div> <!-- Content End -->
        </div> <!-- Lesson Container End -->
    </section> <!-- Lesson Content End -->
       
<script src="/../js/quiz.js"></script>

</body>

<?php require_once __DIR__ . '/../../footer.phtml'; ?>
