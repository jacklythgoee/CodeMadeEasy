<?php require_once __DIR__ . '/../../../base.phtml'; ?>
<?php require_once __DIR__ . '/../cplusNavLesson.phtml'; ?>

<body>

    <section class="lesson-content"> <!-- Lesson Content Start -->
        <div class="lesson-container"> <!-- Lesson Container Start -->
            <div class="content"> <!-- Content Start -->
                <h1>Chapter 2.7 - Programs with Multiple Code Files</h1>
                <hr>
                <div class="part-content">
                    <p>
                        As programs get larger, it is common to split them into multiple files for organizational or reusability purposes. 
                        One advantage of working with an IDE is that they make working with multiple files much easier.  
                    </p>
                    
                    <div class="lesson-practice">
                        <mark>Best Practice </mark>- when you add new code files to your project, give them a .cpp extension 
                    </div>
                    <p>
                        From the previous example on forward declarations and definitions. Instead of doing it on a single-file program. 
                        You can do this on a multiple-file program. The new file is called add.cpp, this is where you would place your add function.  
                    </p>
                    <p>
                        If you were to compile straight away, your compiler may decide to compiler either add.cpp or main.cpp first. 
                        Either way, main.cpp will fail to compile, giving the same compiler error as the previous example.<br>
                        The better solution here is to use <b>forward declaration</b>:
                    </p>
                    <h3>Main.cpp(with forward declaration)</h3>
                        <pre>
                            <code class="language-cpp line-numbers">
                                #include &#x3C;iostream&#x3E;

                                int add(int x, int y); // Needed so main.cpp knows that add() is a function declared elsewhere

                                int main()
                                {
                                    std::cout << "the sum of 3 and 4 is: " << add(3, 4) << '\n';
                                    return 0;
                                }
                            </code>
                        </pre>
                    <h3>Add.cpp(stays the same)</h3>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int add(int x, int y){
                                    return x + y;
                                }
                            </code>
                        </pre>
                </div>

                <div class="part-content">
                    <h2>Declarations Vs Definitions</h2>
                    <p>
                        In C++, you will often hear the words “declaration” and “definition” used interchangeably.<br>
                        A <b>definition</b> actually implements or instantiates the identifier. Here is an example.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int add(int x, int y)   //Implements function add()
                                {
                                    int z{ x+y }; // Instantiates variables z
                                    return z;
                                }
                            </code>
                        </pre>
                    <p>
                        Now when the compiling is compiling main.cpp, it will know what identifier add is and be satisfied. 
                        The linker will connect the function call to add in main.cpp to the definition of function add in add.cpp. 
                        Using this method, we can give file access to functions that live in another file.
                    </p>
                </div>

                <div class="part-content">
                    <h2>Summary</h2>
                    <p>
                        When the compiler compiles a multi-file program, it may compile the files in any order. Additionally, 
                        it compiles each file individually, with no knowledge of what is in other files. We will 
                        begin working with multiple files a lot once we get into object-oriented programming, so now’s as 
                        good as any to make sure you understand how to add and compile multiple file projects. 
                    </p>
                </div>

                <div class="prev-next">
                    <div class="prev-next-inline">
                        <a class="nav-link" href="2_8.php">
                            <div class="nav-button nav-button-next">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-right" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Next Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">2.8</span>
                                        Naming Collisions and an Introduction to Namespaces
                                    </div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="../cplusChapter.php">
                            <div class="nav-button nav-button-index">
                                <div class="nav-button-icon">
                                    <i class="fas fa-home" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Back to Table of Contents</div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="2_6.php">
                            <div class="nav-button nav-button-prev">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-left" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Previous Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">2.6</span>
                                        Forward Declarations and Definitions
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                </div>

            </div> <!-- Content End -->
        </div> <!-- Lesson Container End -->
    </section> <!-- Lesson Content End -->
     
<script src="/../js/quiz.js"></script>

</body>

<?php require_once __DIR__ . '/../../footer.phtml'; ?>
