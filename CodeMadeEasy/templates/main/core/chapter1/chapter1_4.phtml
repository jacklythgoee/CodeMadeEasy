<?php require_once __DIR__ . '/../../../base.phtml'; ?>
<?php require_once __DIR__ . '/../coreNavLesson.phtml'; ?>

<body>

    <section class="lesson-content"> <!-- Lesson Content Start -->
        <div class="lesson-container"> <!-- Lesson Container Start -->
            <div class="content"> <!-- Content Start -->
                <h1>Chapter 1.4 - Variable Assignment and Initialization</h1>
                <hr>
                <p>
                    In this lesson we will explore how to put values into variables and use those values.
                </p>
                <div class="part-content">
                    <h2>Variable Assignment</h2>
                    <p>
                        After a variable has been defined, you can give it a value using the = operator. This process is called copy assignment. 
                        It is named this because it copies the value on the right-hand side if the = operator to the variable on the left-hand 
                        side of the operator. The = operator is called the assignment operator.
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int main()
                                {
                                    int width;
                                    width = 5;      // Copy assignment of value 5 into variable width

                                    // Variable width has a value of 5
                                    width = 7;      //Change value stored in variable width to 7

                                    //Variable width now has a value of 7
                                    return 0;
                                }
                            </code>
                        </pre>
                    <p>
                        When we assign 7 to a variable width, the value 5 that was previously there is over written.
                        Normal variables can only hold one value at a time 
                    </p>
                    <div class="lesson-warning">
                        <mark>Warning</mark> - one of the most common mistakes that new programmers make is to confuse the assignment operator (=) 
                        with the equality operator (==). Assignment (=) is used to assign a value to a variable. Equality (==) is used to test 
                        whether two operands are equal value.
                    </div>
                </div>

                <div class="part-content">
                    <h2>Initialization</h2>
                    <p>
                        One downside of assignment is that it requires at least two statements: one to define the variable, and one to assign the value.
                    </p>
                    <p>
                        These two steps can be combined. When a variable is defined, you can also provide an initial value for the variable at the same time. 
                        This is called <b>initialization</b> . the value used to initialize a variable is called an <b>initializer</b>.
                    </p>
                    <p>
                        There are 4 basic ways to initialize variables in most languages:
                    </p>
                        <pre>
                            <code class="language-cpp line-numbers">
                                int a;      // No initializer
                                int b = 5;  // Initializer after equals sign
                                int c(6);   // Initializer in parenthesis
                                int d{ 7 }  // Initializer in braces
                            </code>
                        </pre>
                </div>

                <div class="part-content">
                    <h2>Initialize your Variables</h2>
                    <p>
                        Initialize your variables upon creation. You may eventually find cases where you want to ignore this advice for a specific reason
                        ( e.g., a performance critical section of code that uses a lot of variables ), and okay, if the choice is made deliberately.
                    </p>
                    <div class="lesson-practice">
                        <mark>Best Practice</mark> - Initialize your variables upon creation.
                    </div>
                </div>

                <div class="part-content quiz">
                    <h2>Chapter 1.4 End of Topic Quiz</h2>
                    <p>
                        The following quiz is meant to reinforce your understanding of the material presented above.
                    </p>
<!-- --------------------------------------------------Question 1 Start --------------------------------------------------------------------------------- -->
                    <h3 class="quiz-question">1. What is the difference between initialization and assignment?</h3>
                    <button onclick="show_hide(this)" class="quiz-button">Show Solution</button>
                    <p id="answer">
                        <b>Initialization</b> gives a variable an initial value at the point when it is created. 
                        <b>Assignment</b> gives a variable a value some point after it is created.
                    </p>
                    <br><br><hr>
                </div>

                <div class="prev-next">
                    <div class="prev-next-inline">
                        <a class="nav-link" href="1_5.php">
                            <div class="nav-button nav-button-next">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-right" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Next Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">1.5</span>
                                        Inputting and Outputting
                                    </div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="../coreChapter.php">
                            <div class="nav-button nav-button-index">
                                <div class="nav-button-icon">
                                    <i class="fas fa-home" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Back to Table of Contents</div>
                                </div>
                            </div>
                        </a>
                        <a class="nav-link" href="1_3.php">
                            <div class="nav-button nav-button-prev">
                                <div class="nav-button-icon">
                                    <i class="fas fa-chevron-circle-left" aria-hidden="true"></i>
                                </div>
                                <div class="nav-button-text">
                                    <div class="nav-button-title">Previous Lesson</div>
                                    <div class="nav-button-lesson">
                                        <span class="nav-button-lesson-number">1.3</span>
                                        Objects and Variables
                                    </div>
                                </div>
                            </div>
                        </a>

                    </div>
                </div>

            </div> <!-- Content Start -->
        </div> <!-- Lesson Container End -->
    </section> <!-- Lesson Content End -->
    
<script src="/../js/quiz.js"></script>

</body>

<?php require_once __DIR__ . '/../../footer.phtml'; ?>
