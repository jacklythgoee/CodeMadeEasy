
    <body>
        <div class="bg-color"><!--bg color Start-->

            <section class="top-bar">
                <nav>
                    <div class="nav-links" id="navLinks">
                        <i class="fas fa-times" onclick="hideMenu()"></i>
                        <ul>
                            <li><a href="../index.html">HOME</a></li>
                            <li><a href="../about.html">ABOUT</a></li>
                            <li><a href="../course.html">COURSE</a></li>
                            <li><a href="../getStarted.html">GET STARTED</a></li>
                            <li><a href="../blog.html">BLOG</a></li>
                            <li><a href="../contact.html">CONTACT</a></li>
                        </ul>
                    </div>
                    <i class="fas fa-bars" onclick="showMenu()"></i>
                </nav>
            </section>
            <section class="lesson-content">

                <div class="lesson-container">
                    <div class="content">
                        <h1>Chapter 2.8 - Naming Collisions and an Introduction to Namespaces</h1>
                        <hr>

                        <div class="part-content">
                            <p>
                                C++ requires that all identifiers be non-ambiguous. If two identical identifiers are introduced 
                                into the same program in a way that the compiler or linker cannot tell them apart, the compiler or linker
                                 will produce an error. This error is generally referred to as a <b>naming collision</b> or <b>naming conflict</b>.
                            </p>
                            
                                <h3>a.cpp</h3>
                                <pre>
                                    <code class="language-cpp line-numbers">
                                        #include &#x3C;iostream&#x3E;

                                        void myFcn(int x)
                                        {
                                            std::cout << x;
                                        }
                                    </code>
                                </pre>
                                <h3>main.cpp</h3>
                                <pre>
                                    <code class="language-cpp line-numbers">
                                        #include &#x3C;iostream&#x3E;

                                        void myFcn(int x)
                                        {
                                            std::cout << 2 * x;
                                        }
                                        int main()
                                        {
                                            return 0;
                                        }
                                    </code>
                                </pre>
                            <p>
                                When the compiler compiles this program, it will compile a.cpp and main.cpp independently, 
                                each file will compile with no problems. However, when the linker executes, it will link all the 
                                definitions in a.cpp and main.cpp together and discover conflicting definitions for function myFcn. 
                                The linker will then abort an error. Note that this error occurs even though myFcn is never called!
                            </p>
                            <p>
                                Most naming collisions occur in two cases:
                            </p>
                            <p>
                                <b>1)</b> Two or more definitions for a function or global variable are introduced into separate 
                                files that are compiled into the same program. This will result in a linker error, as shown above.
                            </p>
                            <p>
                                <b>2)</b>	Two or more definitions for a function or global variable are introduced into 
                                the same file via #include. This will result in a compile error.
                            </p>
                            <p>
                                As programs get larger and more identifiers, the odds of a naming collision being introduced increases significantly. 
                                The good news is that C++ provides plenty of mechanisms for avoiding naming collisions. Local scope, which keeps local 
                                variables defined inside functions from conflicting with each other, is one such mechanism. But local scope does not work 
                                for function names. So how do we keep function names from conflicting each other?
                            </p>
                            
                        </div>
                        <div class="part-content">
                            <h2>What is Namespace?</h2>
                            <p>
                                A <b>namespace</b> is a region that allows you to declare names inside of it for the purpose of disambiguation. 
                                The namespace provides a scope called a <b>namespace scope</b> to the names declared inside of it – which simply 
                                means that any name declared inside the namespace will not be mistaken for identical names in other scopes.
                            </p>
                                <pre>
                                    <code class="language-cpp line-numbers">
                                        int add(int x, int y)   //Implements function add()
                                        {
                                            int z{ x+y }; // Instantiates variables z
                                            return z;
                                        }
                                    </code>
                                </pre>
                                <div class="lesson-practice">
                                    <mark>Key Insight</mark> - a name declared in a namespace will not be mistaken for an identical name declared in another scope.
                                </div>
                            <p>
                                Within a namespace, all names must be unique, otherwise a naming collision will result. 
                                Namespaces are often used to group related identifiers in large project to help ensure they don’t 
                                inadvertently collide with other identifiers. For example, if you put all your math functions in a 
                                namespace called math, then your math functions will not collude with identically named functions outside the math namespace.
                            </p>

                        </div>
                        <div class="part-content">

                            <h2>Global Namespace</h2>
                            <p>
                                In C++, any name that is not defined inside a class, function, or a namespace is 
                                considered to be part of an implicitly defined namespace called the <b>global namespace</b> or 
                                <b>global scope</b>. In the example above, functions main() and both versions of myFcn() are defined 
                                inside the global namespace. The naming collision encountered in the example happens because both 
                                versions of myFcn() end up inside the global namespace, which violates the rule that all names in 
                                the namespace must be unique.
                            </p>
                            
                        </div>
                        <div class="part-content">
                            
                            <h2>The STD Namespace</h2>
                            <p>
                                When C++ was originally designed, all of the identifiers in the C++ standard library were available to be 
                                used without the std:: prefix. However, this meant that any identifier in the standard library could potentially 
                                conflict with any name you picked for your own identifiers. Code that was working might suddenly have a name 
                                conflict when you #include a new file from the standard library. Or worse, programs that would compile under 
                                one version of C++ might not compile under a future version, as new identifiers introduced into the standard 
                                library could have a naming conflict already with written code. So, C++ moved all of the functionality in the 
                                standard library into a namespace named “std” (short for standard).
                            </p>
                            <p>
                                It turns out that std::cout’s name is not really std::cout. It is actually just cout, and std 
                                is the name of the namespace that identifier cout is part of. Because cout is defined in the std
                                namespace, the name cout wont conflict with any objects or functions named cout that we create in the global namespace
                            </p>
                            <div class="lesson-practice">
                                <mark>Key Insight</mark> - when you use an identifier that is defined inside a namespace, you have to tell the compiler 
                                that the identifier lives inside the namespace
                            </div>
                            
                        </div>
                        <div class="part-content">
                            
                            <h2>Explicit namespace qualifier std::</h2>
                            <p>
                                The most straightforward way to tell the compiler that we want to use cout from the std namespace 
                                is by explicitly using the std:: prefix. For example:
                            </p>
                                <pre>
                                    <code class="language-cpp line-numbers">
                                        #include &#x3C;iostream&#x3E;
                                        int main()
                                        {
                                            std::cout << "Hello World!";    // When we say cout, we mean the cout defined in the std namespace
                                            return 0;
                                        }
                                    </code>
                                </pre>
                            <p>
                                The :: symbol is an operator called the scope resolution operator. The identifier to the left of the :: 
                                symbol identifies the namespace that the name to the right of the :: symbol is contained within. If no 
                                identifier to the left of the :: symbol is provided, the global namespace is assumed.<br>

                                This is the safest way to use cout because there is no ambiguity about which cout we are referencing.
                            </p>
                            <div class="lesson-practice">
                                <mark>Best Practice</mark> – use explicit namespace prefixes to access identifiers defines in a namespace.
                            </div>
                            
                        </div>
                        <div class="part-content">
                            
                            <h2>Using Namespace STD (and why to avoid it)</h2>
                            <p>
                                Another way to access identifiers inside a namespace is to use a using directive statement.
                            </p>
                                <pre>
                                    <code class="language-cpp line-numbers">
                                        #include &#x3C;iostream&#x3E;

                                        using namespace std;    /*This is a using Directive telling the compiler to check the std 
                                                                                     namespacepace when resolving identifiers with no prefix*/
                                        int main()
                                        {
                                            std::cout << "Hello World!";    /* cout has no prefix, so the compiler will check to see if 
                                                                                            if cout is defind locally or in namespace*/
                                            return 0;
                                        }
                                    </code>
                                </pre>
                            <p>
                                A <b>using directive</b> tells the compiler to check a specified namespace when trying to resolve an 
                                identifier that has no namespace prefix. In the above example, when the compiler goes to determine what
                                 identifier cout is, it will check both locally (where it is undefined) and the 
                                 std namespace (where it will match to std::cout).
                            </p>
                            <div class="split-content">
                                <pre>
                                    <code class="language-cpp line-numbers">
                                        #include &#x3C;iostream&#x3E;// Imports the declaration of std::cout

                                        using namespace std;    // makes std::cout accessible as "cout"
                                        int cout()
                                        {
                                            return 5;
                                        }                                           
                                        int main()
                                        {
                                            cout << "Hello World!"; // Compile error! Which cout do we want here?
                                                                    //The one in the std namespace of the one we defined above?
                                            return 0;
                                        }
                                    </code>
                                </pre>
                                <img src="../../public/images/Chapter2/picture1.png" class="chap-2-picture1">
                            </div>
                            <p>
                                The program above does not compile, because the compiler now cannot tell whether we want the cout 
                                function that we defined, or the cout that is defined inside the std namespace. When using a using 
                                directive in this manner, any identifier we define may conflict with any identically named identifier 
                                in the std namespace. Even worse, while an identifier name may not conflict today, it may conflict with 
                                new identifiers added to the std namespace in future language revisions. This was the whole point 
                                of moving all of the identifiers in the standard library into the std namespace in the first place.
                            </p>
                            <div class="lesson-warning">
                                <mark>Warning</mark> - avoid using directives (such as using namespace std;) at the top of your program. 
                                They violate the reason why namespaces were added in the first place.
                            </div>
                                
                        </div>

                         
                        <div class="prev-next">
                            <div class="prev-next-inline">
                                <a class="nav-link" href="chapter2_9.html">
                                    <div class="nav-button nav-button-next">
                                        <div class="nav-button-icon">
                                            <i class="fas fa-chevron-circle-right" aria-hidden="true"></i>
                                        </div>
                                        <div class="nav-button-text">
                                            <div class="nav-button-title">Next Lesson</div>
                                            <div class="nav-button-lesson">
                                                <span class="nav-button-lesson-number">2.9</span>
                                                Intoduction to the Preprocessor
                                            </div>
                                        </div>
                                    </div>
                                </a>
                                <a class="nav-link" href="../cplusChapter.html">
                                    <div class="nav-button nav-button-index">
                                        <div class="nav-button-icon">
                                            <i class="fas fa-home" aria-hidden="true"></i>
                                        </div>
                                        <div class="nav-button-text">
                                            <div class="nav-button-title">Back to Table of Contents</div>
                                        </div>
                                    </div>
                                </a>
                                <a class="nav-link" href="chapter2_7.html">
                                    <div class="nav-button nav-button-prev">
                                        <div class="nav-button-icon">
                                            <i class="fas fa-chevron-circle-left" aria-hidden="true"></i>
                                        </div>
                                        <div class="nav-button-text">
                                            <div class="nav-button-title">Previous Lesson</div>
                                            <div class="nav-button-lesson">
                                                <span class="nav-button-lesson-number">2.7</span>
                                                Programs with Multiple Code Files
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        </div>

                    </div>
                </div>
                
            </section>
    
            <!-- Footer -->
            <section class="footer">
                <h4>About Us</h4>
                <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. </p>
                <div class="icons">
                    <i class="fab fa-facebook-square"></i>
                    <i class="fab fa-twitter-square"></i>
                    <i class="fab fa-instagram-square"></i>
                    <i class="fab fa-linkedin"></i>
                </div>
                <p>
                    Made with <i class="fab fa-facebook-square"></i> Easy Tutorials
                </p>
            </section>

         </div> <!--bg color End -->
        


     <script>
        var navLinks = document.getElementById("navLinks")

        function showMenu(){
            navLinks.style.right = "0";
        }
        function hideMenu(){
            navLinks.style.right = "-200px";
        }
     </script>
     <script>
        function show_hide(element)
        {
           var myAnswer = element.nextElementSibling;

           var displaySetting = myAnswer.style.display;

           var quizButton = element;

           if(displaySetting=="inline-block"){
               myAnswer.style.display = 'none';

               quizButton.innerHTML = 'Show Solution';
           }
           else
           {
               myAnswer.style.display = 'inline-block';
               quizButton.innerHTML = 'Hide Solution';
           }
        }
    </script>
    </body>
